// Generated by msgbuilder 2019-05-02 07:55:41 +0000

import StdMsgs

extension sensor_msgs {
	/// Single range reading from an active ranger that emits energy and reports
	/// one range reading that is valid along an arc at the distance measured. 
	/// This message is  not appropriate for laser scanners. See the LaserScan
	/// message if you are working with a laser scanner.
	/// This message also can represent a fixed-distance (binary) ranger.  This
	/// sensor will have min_range===max_range===distance of detection.
	/// These sensors follow REP 117 and will output -Inf if the object is detected
	/// and +Inf if the object is outside of the detection range.
	/// Radiation type enums
	/// If you want a value added to this list, send an email to the ros-users list
	public struct Range: Message {
		public static let md5sum: String = "08605ed44048c80a876868fb9cc8d5d1"
		public static let datatype = "sensor_msgs/Range"
		public static let definition = """
			# Single range reading from an active ranger that emits energy and reports
			# one range reading that is valid along an arc at the distance measured. 
			# This message is  not appropriate for laser scanners. See the LaserScan
			# message if you are working with a laser scanner.
			# This message also can represent a fixed-distance (binary) ranger.  This
			# sensor will have min_range===max_range===distance of detection.
			# These sensors follow REP 117 and will output -Inf if the object is detected
			# and +Inf if the object is outside of the detection range.
			Header header           # timestamp in the header is the time the ranger
			                        # returned the distance reading
			# Radiation type enums
			# If you want a value added to this list, send an email to the ros-users list
			uint8 ULTRASOUND=0
			uint8 INFRARED=1
			uint8 radiation_type    # the type of radiation used by the sensor
			                        # (sound, IR, etc) [enum]
			float32 field_of_view   # the size of the arc that the distance reading is
			                        # valid for [rad]
			                        # the object causing the range reading may have
			                        # been anywhere within -field_of_view/2 and
			                        # field_of_view/2 at the measured range. 
			                        # 0 angle corresponds to the x-axis of the sensor.
			float32 min_range       # minimum range value [m]
			float32 max_range       # maximum range value [m]
			                        # Fixed distance rangers require min_range==max_range
			float32 range           # range data [m]
			                        # (Note: values < range_min or > range_max
			                        # should be discarded)
			                        # Fixed distance rangers only output -Inf or +Inf.
			                        # -Inf represents a detection within fixed distance.
			                        # (Detection too close to the sensor to quantify)
			                        # +Inf represents no detection within the fixed distance.
			                        # (Object out of range)
			"""

		public static let hasHeader = true

		public static let ULTRASOUND: UInt8 = 0
		public static let INFRARED: UInt8 = 1
		public var header: std_msgs.Header
		public var radiation_type: UInt8
		public var field_of_view: Float32
		public var min_range: Float32
		public var max_range: Float32
		public var range: Float32

		public init(header: std_msgs.Header, radiation_type: UInt8, field_of_view: Float32, min_range: Float32, max_range: Float32, range: Float32) {
			self.header = header
			self.radiation_type = radiation_type
			self.field_of_view = field_of_view
			self.min_range = min_range
			self.max_range = max_range
			self.range = range
		}

		public init() {
			header = std_msgs.Header()
			radiation_type = UInt8()
			field_of_view = Float32()
			min_range = Float32()
			max_range = Float32()
			range = Float32()
		}
	}
}