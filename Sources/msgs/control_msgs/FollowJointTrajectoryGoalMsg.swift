import Foundation
import StdMsgs
import RosTime
import trajectory_msgs

extension control_msgs {
/// ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
/// The joint trajectory to follow
/// Tolerances for the trajectory.  If the measured joint values fall
/// outside the tolerances the trajectory goal is aborted.  Any
/// tolerances that are not specified (by being omitted or set to 0) are
/// set to the defaults for the action server (often taken from the
/// parameter server).
/// Tolerances applied to the joints as the trajectory is executed.  If
/// violated, the goal aborts with error_code set to
/// PATH_TOLERANCE_VIOLATED.
/// To report success, the joints must be within goal_tolerance of the
/// final trajectory value.  The goal must be achieved by time the
/// trajectory ends plus goal_time_tolerance.  (goal_time_tolerance
/// allows some leeway in time, so that the trajectory goal can still
/// succeed even if the joints reach the goal some time after the
/// precise end time of the trajectory).
///
/// If the joints are not within goal_tolerance after "trajectory finish
/// time" + goal_time_tolerance, the goal aborts with error_code set to
/// GOAL_TOLERANCE_VIOLATED
public struct FollowJointTrajectoryGoal: Message {
public static var md5sum: String = "69636787b6ecbde4d61d711979bc7ecb"
public static var datatype = "control_msgs/FollowJointTrajectoryGoal"
public static var definition = """
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# The joint trajectory to follow
trajectory_msgs/JointTrajectory trajectory

# Tolerances for the trajectory.  If the measured joint values fall
# outside the tolerances the trajectory goal is aborted.  Any
# tolerances that are not specified (by being omitted or set to 0) are
# set to the defaults for the action server (often taken from the
# parameter server).

# Tolerances applied to the joints as the trajectory is executed.  If
# violated, the goal aborts with error_code set to
# PATH_TOLERANCE_VIOLATED.
JointTolerance[] path_tolerance

# To report success, the joints must be within goal_tolerance of the
# final trajectory value.  The goal must be achieved by time the
# trajectory ends plus goal_time_tolerance.  (goal_time_tolerance
# allows some leeway in time, so that the trajectory goal can still
# succeed even if the joints reach the goal some time after the
# precise end time of the trajectory).
#
# If the joints are not within goal_tolerance after "trajectory finish
# time" + goal_time_tolerance, the goal aborts with error_code set to
# GOAL_TOLERANCE_VIOLATED
JointTolerance[] goal_tolerance
duration goal_time_tolerance
"""
public static var hasHeader = false

public var trajectory: trajectory_msgs.JointTrajectory
public var path_tolerance: [JointTolerance]
public var goal_tolerance: [JointTolerance]
public var goal_time_tolerance: RosTime.Duration

public init(trajectory: trajectory_msgs.JointTrajectory, path_tolerance: [JointTolerance], goal_tolerance: [JointTolerance], goal_time_tolerance: RosTime.Duration) {
self.trajectory = trajectory
self.path_tolerance = path_tolerance
self.goal_tolerance = goal_tolerance
self.goal_time_tolerance = goal_time_tolerance
}

public init() {
    trajectory = trajectory_msgs.JointTrajectory()
path_tolerance = [JointTolerance]()
goal_tolerance = [JointTolerance]()
goal_time_tolerance = RosTime.Duration()
}

}
}
