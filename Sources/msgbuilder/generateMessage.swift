//
//  generateMessage.swift
//  msgbuilder
//
//  Created by Thomas Gustafsson on 2019-04-27.
//

import Foundation

/// Split a name into its package and resource name parts, e.g. 'std_msgs/String -> std_msgs, String'
///
/// - Parameters:
///     - name: package resource name, e.g. 'std_msgs/String'
/// - Returns: package name, resource name

func package_resource_name(name: String) -> (package: String, name: String)? {
    if name.contains("/") {
        let val = name.components(separatedBy: "/")
        if val.count != 2 {
            return nil
        } else {
            return (val[0], val[1])
        }
    }
    return ("", name)
}

extension MsgSpec {

    func generateSwiftCode(context: MsgContext) -> String? {

        let swiftMessageType = full_name.replacingOccurrences(of: "/", with: ".")
        let data = text.components(separatedBy: .newlines).filter{ $0 != "" }
        if package == "std_msgs" && data.count == 1 {
            return generateStdMsgSwiftCode(context: context)
        }

        let tabbedData = data.joined(separator: "\n\t\t\t")

        let constDecl = constants.map { $0.declaration(in: package) }.joined(separator: "\n\t")
        let decl = variables.map{ $0.declaration(in: package) }.joined(separator: "\n\t")

        guard let md5sum = compute_md5(msg_context: context) else {
            print("Could not compute md5 for \(full_name)")
            return nil
        }

        let arguments = variables.compactMap{$0.argument(in: package)}.joined(separator: ", ")
        let initCode = variables.compactMap{$0.initCode}.joined(separator: "\n\t")
        let codeInit = variables.compactMap{$0.codeInit(in: package)}.joined(separator: "\n\t")
        let path = swiftMessageType.components(separatedBy: ".")
        var modules = Set(variables.compactMap{$0.module})
        modules.remove(package)
        modules.remove("std_msgs")
        if package != "std_msgs" {
            modules.insert("StdMsgs")
        }
        let varTypes = Set(variables.map { bare_msg_type($0.field_type) })
        if varTypes.contains(TIME) || varTypes.contains(DURATION) {
            modules.insert("RosTime")
        }
        let importModules = modules.map{"import \($0)"}.joined(separator: "\n")
        let hasHeader = variables.contains { $0.simpleType == "std_msgs.Header" }

        let comments = data.filter{ $0.starts(with: "#") }
            .map { "\t///" + $0.dropFirst() }
            .joined(separator: "\n")
        var argInit = ""
        if !arguments.isEmpty {
            argInit = """
            \t\tpublic init(\(arguments)) {
            \t\(initCode)
            \t\t}
            """
        }

        let code = """
            // Generated by msgbuilder \(Date())

            \(importModules)

            extension \(path.dropLast().joined(separator: ".")) {
            \(comments)
            \tpublic struct \(path.last!): Message {
            \t\tpublic static let md5sum: String = "\(md5sum)"
            \t\tpublic static let datatype = "\(full_name)"
            \t\tpublic static let definition = \"\"\"
            \t\t\t\(tabbedData)
            \t\t\t\"\"\"

            \t\tpublic static let hasHeader = \(hasHeader)

            \t\(constDecl)
            \t\(decl)

            \(argInit)

            \t\tpublic init() {
            \t\(codeInit)
            \t\t}
            \t}
            }
            """

        return code
    }
}
